<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[探索JS原型链]]></title>
    <url>%2F2017%2F05%2F10%2F%E6%8E%A2%E7%B4%A2JS%E5%8E%9F%E5%9E%8B%E9%93%BE%2F</url>
    <content type="text"><![CDATA[踏入面向对象的世界最近在观看Zepto源码解析的视频时，老师又讲到了$对象与普通对象的区别，还记得《锋利的jquery》一书中说，$对象与普通对象的区别在于，$对象是一个数组结构的对象，但没有数组的push，shift方法。想必在控制台大家也注意这对”[]”。那么它内部是如何实现这个不是数组的对象呢？其实实现这个方法非常容易，也就是这个方法，体现了JS作为一门面向对象编程语言的继承功能——JS原型链。 JS原型英文解析Every JavaScript object has a prototype. The prototype is also an object.All JavaScript objects inherit their properties and methods from their prototype. JavaScript PrototypesAll JavaScript objects inherit the properties and methods from their prototype.Objects created using an object literal, or with new Object(), inherit from a prototype called Object.prototype.Objects created with new Date() inherit the Date.prototype.The Object.prototype is on the top of the prototype chain.All JavaScript objects (Date, Array, RegExp, Function, ….) inherit from the Object.prototype.More info: w3schools首先说下为什么要拉出英文的定义，我在写这篇文档时，查看了前3页的搜索“JS原型链”的文章，其中定义最清晰简洁的还要属w3school，一般来说访问这个网站需要翻墙，国内有一个汉化版，但是不全，比较新的内容没有搬过来，比如英文版的w3school有一个w3.css的小框架，用法跟bootstrap一样，都是往class标签里添加类，用起来比bootstrap更小巧。不过比较冷门。引用的英文的意思是说，每个JS对象都有一个原型，原型也是对象，JS对象从原型那里继承了属性和方法。既然每个对象都有原型，那肯定有一个顶，也就是原型链最深处的原始原型，下文也说了，即Object.prototype，但，这里有一个常见的误区，就是把原型和对象的prototype属性划等号。在ECMAScript5的语法当中，prototype是函数特有的属性，实例对象的原型则是__proto__,prototype用来存放函数继承给下一代的东西，但是对于函数自己是不可见的。例一： 12345var a = function () &#123;&#125;;a.prototype.b=3;a.b; // undefinedvar b = new a();b.b; // 3 这里用new关键字构造了b对象，此时a也称为构造函数，构造函数很容易和constructor属性弄混，尤其是：12var b = new a () ;b.constructor === a; // true 这里返回的true让人觉得这是b由a构造的证据，but，实际上不是，1b.hasOwnProperty("constructor"); // false b中并没有constructor属性，那这个属性是哪里来的呢，根据原型继承，JS会沿着原型链向上查找，首先是a.prototype:123b.__proto__ === a.prototype; // truea.prototype.hasOwnProperty("constructor"); // trueb.constructor === a.prototype.constructor; // true 实际上b.constructor是a原型链上的属性，而a的原型链之所以有这个属性，也正是指出了a的原型链是a对象在实例化出来的同时由a对象构造出来存放继承属性及方法的地方。不过由于constructor属性可以随意更改，所以单凭该属性来判定函数原型的构造很危险，也并不常用。a函数对象的实例化：123var a = function () &#123;&#125;;function a() &#123;&#125;;var a = new Function () ; 以上3种方法是等价的，唯一不同的是function a () {}函数声明会前置，这里涉及到JS引擎解析代码的过程，略过不提。第3种方法也揭示了创建一个函数也是一个实例化，常用的Array，String，Boolean。实际上也是Function函数的实例化对象。12Array.__proto__ === Function.prototype; //trueBoolean.__proto__ === Function.prototype; //true 常用的数组方法，push，pop，shift，也是定义在Array的Prototype上：1console.log(Array.prototype); 回到刚开始的问题：$()函数是类数组的结构，却没有数组的方法，即$()实际的原型不是指向Array函数的prototype。例：1234var a = new Array();a.push(1); // 1a.__proto__ = new Object();a.push(2); // Uncaught TypeError 更改了a数组的原型指向，便没有了数组上定义的方法。 总结函数的prototype对象存放着该函数实例化对象继承的方法，Array等函数的定义更像是实现了一个方法集。一个面向对象编程语言当中类的概念。但并不完美，譬如函数本身无法访问到，所以便有了JS当中的特权方法，也就是另一个难点this的指向，下一章，我将会对JS的作用域进行分析，想要理解this的指向问题，闭包，实际上就是理解函数在执行时的作用域的变化。 题外话这篇文章从10号晚上开始写，今天14号。比预计的进度慢，期间严重感冒，一度坐在电脑面前咳咳咳，除了上班剩下的时间都用来睡觉恢复了。今天感冒消散，赶紧把挖的洞补上。想说的是，写博客确实是一个人能力提升的好办法，从写的时候上网查资料，到转化为自己理解的语言，再进行代码测试，最后发布。这种用输出倒逼输入的过程比自己看书，看视频学习的效率要高上不少，难怪有老的程序员说，想要提高，就要自己写博客。也希望自己能够越写越顺畅~]]></content>
      <tags>
        <tag>-技术 -面向对象语言</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客添加功能]]></title>
    <url>%2F2017%2F05%2F03%2F%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[升级版本之前的博客用的是Hexo默认的主题，今天根据网上的攻略换成了next主题，next主题的官方文档，依次添加了评论模块，搜索，标签，其中音乐模块的添加来自如何在Hexo中添加网易云音乐。 遗留的问题，Hexo发布文章时，需要先在命令行中输入hexo g,否则页面调试时加载不出对应的文章。来必应的加载速度很慢，会出现评论无法显示的情况，体验不佳。改善建议：1，利用码云云加速，提高网站的访问速度。2，若1无显著效果，考虑将内容部署到自己的服务器上，提升稳定性。]]></content>
      <tags>
        <tag>-音乐 -功能</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello]]></title>
    <url>%2F2017%2F05%2F01%2Fhello%2F</url>
    <content type="text"><![CDATA[Hexo的建站之旅一直想搭建一个属于自己的博客，从3个月前用H5页面打造的简历，到今天的Hexo最初的想法是用前端技术从前台一直搭到后台，无奈时间来不及。目前正在写一个自己的库和翻看jquery的源码，同时也确实意识到不一定所有的东西都要自己造轮子，所以选择了Hexo来快速建站。提前开始自己的书写之旅。 关于代码Hexo的搭建十分简单，但是现在的版本也十分简陋，还没有进行排版和打造留言模块，接下来会添加上来。包括标签，搜索栏等等。先尝试着用MrakDown的语法发了这篇博客，也算是插了个旗帜。所以，这就是第一篇hello world了。]]></content>
      <tags>
        <tag>-随笔 -第一章</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F05%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>